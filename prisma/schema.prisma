// Prisma schema for authenticated chat with persistence

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String
  createdAt    DateTime  @default(now())
  isAdmin      Boolean   @default(false)

  rooms        Room[]    @relation("RoomOwner")
  memberships  Membership[]
  messages     Message[]
  forwardedMessages Message[] @relation("ForwardedBy")
  auditLogs    AuditLog[]
}

model Room {
  id        Int          @id @default(autoincrement())
  code      String       @unique
  ownerId   Int
  owner     User         @relation("RoomOwner", fields: [ownerId], references: [id])
  createdAt DateTime     @default(now())

  memberships Membership[]
  messages     Message[]
  auditLogs    AuditLog[]
}

model Membership {
  id        Int      @id @default(autoincrement())
  userId    Int
  roomId    Int
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Message {
  id        Int       @id @default(autoincrement())
  roomId    Int
  userId    Int
  text      String
  createdAt DateTime  @default(now())
  deletedAt DateTime? // soft delete
  editedAt  DateTime? // last edited timestamp

  // Optional attachment fields
  attachmentUrl  String?
  attachmentType String? // 'image' | 'video' | 'file'
  attachmentName String?
  attachmentSize Int?
  attachmentMime String?
  // Encryption metadata for attachments (Room-secret E2EE)
  attachmentEnc  Boolean? @default(false)
  attachmentIv   String?

  // Reply threading (quoting a previous message)
  replyToId  Int?
  replyTo    Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replies    Message[] @relation("ReplyTo")

  // Forwarding metadata (preserve original provenance)
  forwardFromMessageId Int?
  forwardFrom          Message?  @relation("ForwardFrom", fields: [forwardFromMessageId], references: [id])
  forwards             Message[] @relation("ForwardFrom")
  forwardedByUserId    Int?
  forwardedBy          User?     @relation("ForwardedBy", fields: [forwardedByUserId], references: [id])
  forwardedOriginalSenderName String?
  forwardedOriginalTimestamp DateTime?

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([roomId, createdAt])
  @@index([replyToId])
  @@index([forwardFromMessageId])
}

// Audit logs for admin dashboard
model AuditLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int?
  action    String   // e.g., 'login', 'logout', 'message_sent', 'message_deleted', 'room_cleared', 'upload'
  ip        String?
  roomId    Int?
  meta      String?  // JSON string for additional details

  user User? @relation(fields: [userId], references: [id])
  room Room? @relation(fields: [roomId], references: [id])

  @@index([createdAt])
}
